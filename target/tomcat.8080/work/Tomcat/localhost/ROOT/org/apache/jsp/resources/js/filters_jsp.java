/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.30
 * Generated at: 2016-09-04 21:53:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.resources.js;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class filters_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/javascript; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("        $(document).ready(function () {\r\n");
      out.write("            if (sessionStorage.slidersUrl != null && sessionStorage.slidersUrl != \"\") {\r\n");
      out.write("                loadFilterSlidersParams();\r\n");
      out.write("            } else {\r\n");
      out.write("                loadDefaultSliders(slidersNames);\r\n");
      out.write("            }\r\n");
      out.write("            if (sessionStorage.checkboxesUrl != null && sessionStorage.checkboxesUrl != \"\") {\r\n");
      out.write("                loadFilterCheckboxesParams();\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        function loadDefaultSliders(slidersLeft) {\r\n");
      out.write("            $(specificSlidersNames).each(function(index, value){\r\n");
      out.write("                if(slidersLeft.indexOf(value) != -1) {\r\n");
      out.write("                    loadSlider(value, slidersDefaultRange[value][0], slidersDefaultRange[value][1], specificSliders[value], \"\");\r\n");
      out.write("                    slidersLeft = $.grep(slidersLeft, function(item){\r\n");
      out.write("                        return item != value;\r\n");
      out.write("                    });\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("            $(slidersLeft).each(function (index, value) {\r\n");
      out.write("                loadSlider(value, slidersDefaultRange[value][0], slidersDefaultRange[value][1], commonStep, \"\");\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function loadFilterSlidersParams() {\r\n");
      out.write("            var slidersLeft = slidersNames;\r\n");
      out.write("            var sliders = sessionStorage.slidersUrl.split('&');\r\n");
      out.write("            $(sliders).each(function (index, value) {\r\n");
      out.write("                slidersLeft = $.grep(slidersLeft, function(item){\r\n");
      out.write("                    return item != value;\r\n");
      out.write("                });\r\n");
      out.write("                var val = value.split('=');\r\n");
      out.write("                var minDefault = slidersDefaultRange[val[0]][0];\r\n");
      out.write("                var maxDefault = slidersDefaultRange[val[0]][1];\r\n");
      out.write("                $(specificSlidersNames).each(function(index, value){\r\n");
      out.write("                    if(val[0] == value) {\r\n");
      out.write("                        loadSlider(val[0], minDefault, maxDefault, specificSliders[val[0]], val[1]);\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("                loadSlider(val[0], minDefault, maxDefault, commonStep, val[1]);\r\n");
      out.write("            });\r\n");
      out.write("            loadDefaultSliders(slidersLeft);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function loadSlider(nameVal, minVal, maxVal, stepVal, valueVal) {\r\n");
      out.write("            var thisSlider = $('#' + nameVal + '-slider');\r\n");
      out.write("            if (valueVal != \"\" && valueVal != (minVal + \",\" + maxVal)) {\r\n");
      out.write("                thisSlider.val(valueVal);\r\n");
      out.write("            }\r\n");
      out.write("            valueVal = (valueVal == \"\") ? [minVal, maxVal] : valueVal.split(\",\").map(Number);\r\n");
      out.write("            thisSlider.slider({min: parseInt(minVal), max: parseInt(maxVal), step: stepVal, value: valueVal});\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function loadFilterCheckboxesParams() {\r\n");
      out.write("            var checkboxes = sessionStorage.checkboxesUrl.split('&');\r\n");
      out.write("             $(checkboxes).each(function (index, value) {\r\n");
      out.write("                var val = value.split('=');\r\n");
      out.write("                loadCheckbox(val[0], val[1]);\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function loadCheckbox(name, data) {\r\n");
      out.write("            var arr = data.split(',');\r\n");
      out.write("            $('input[name=' + name + ']').each(function () {\r\n");
      out.write("                $(this).prop('checked', arr.indexOf($(this).val()) != -1);\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function submitFilter() {\r\n");
      out.write("            saveSlidersUrl();\r\n");
      out.write("            saveFilterCheckboxesUrl();\r\n");
      out.write("            sessionStorage.page = \"1\";\r\n");
      out.write("            goToPlywood();\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function saveSlidersUrl() {\r\n");
      out.write("            var url = \"\";\r\n");
      out.write("            $(slidersNames).each(function (index, value) {\r\n");
      out.write("                var currentRange = $('#' + value + '-slider').val();\r\n");
      out.write("                if (currentRange != \"\" && shouldBeFilteredSlider(currentRange, value)) {\r\n");
      out.write("                    url += value + '=' + currentRange + '&';\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("            if(url != \"\") {\r\n");
      out.write("                url = url.substring(0, url.length - 1);\r\n");
      out.write("            }\r\n");
      out.write("            sessionStorage.slidersUrl = url;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function shouldBeFilteredSlider(current, name) {\r\n");
      out.write("            var minMax = current.split(',');\r\n");
      out.write("            return minMax[0] != slidersDefaultRange[name][0] || minMax[1] != slidersDefaultRange[name][1];\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function saveFilterCheckboxesUrl() {\r\n");
      out.write("            var url = \"\";\r\n");
      out.write("            $(checkboxesNames).each(function (index, value) {\r\n");
      out.write("                if (shouldBeFilteredCheckbox(value)) {\r\n");
      out.write("                    url += value + '=' + getCheckbox(value) + '&';\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("            if(url != \"\") {\r\n");
      out.write("                url = url.substring(0, url.length - 1);\r\n");
      out.write("            }\r\n");
      out.write("            sessionStorage.checkboxesUrl = url;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function shouldBeFilteredCheckbox(name) {\r\n");
      out.write("            var checkedExist = false;\r\n");
      out.write("            $('input[name=' + name + ']').each(function () {\r\n");
      out.write("                if (this.checked) {\r\n");
      out.write("                    checkedExist = true;\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("            return checkedExist;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function getCheckbox(name) {\r\n");
      out.write("            var data = \"\";\r\n");
      out.write("            $('input[name=' + name + ']').each(function () {\r\n");
      out.write("                data += this.checked ? (this.value + \",\") : \"\";\r\n");
      out.write("            });\r\n");
      out.write("            if(data != \"\") {\r\n");
      out.write("                data = data.substring(0, data.length - 1);\r\n");
      out.write("            }\r\n");
      out.write("            return data;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function resetFilter() {\r\n");
      out.write("            sessionStorage.slidersUrl = \"\";\r\n");
      out.write("            sessionStorage.checkboxesUrl = \"\";\r\n");
      out.write("            goToPlywood();\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
